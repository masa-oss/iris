/**
 *   Copyright (c) Masahito Hemmi. All rights reserved.
 *   The use and distribution terms for this software are covered by the
 *   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
 *   which can be found in the file epl-v10.html at the root of this distribution.
 *   By using this software in any fashion, you are agreeing to be bound by
 * 	 the terms of this license.
 *   You must not remove this notice, or any other, from this software.
 * */
package iris.example.gui;

import iris.clojure.lang.ILispReader;
import iris.clojure.lang.LineNumberingPushbackReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import javax.swing.JOptionPane;

import iris.clojure.nsvar.CljCompiler;
import iris.clojure.nsvar.Namespace;
import iris.clojure.lang.RTPrinter;
import iris.clojure.lang.Symbol;
import iris.clojure.lang.RT;
import iris.clojure.nsvar.LispReaderFactory;
import iris.example.eval.EvaluatorException;

import iris.example.eval.ExampleEvaluator;
import iris.example.eval.LexicalScope;

import iris.example.eval.ExampleInitializer;
import iris.example.eval.Globals;
import java.io.StringReader;

import org.slf4j.LoggerFactory;

/**
 *
 */
public class LispJPanel extends javax.swing.JPanel {

    private static final org.slf4j.Logger LOG = LoggerFactory.getLogger(LispJPanel.class);

    /**
     * Creates new form LispJPanel
     */
    public LispJPanel() {
        initComponents();

        jButton2ActionPerformed(null);
        //   this.jTextArea2.setText(        "(dump1 \"clojure.core\")"   );
        // this.jTextArea2.setText("(def bbb (fn* [x y] (. clojure.lang.Numbers (add x y)) ))");
        this.jTextArea2.setText("( iris.clojure.core/load-file  \"test1.lsp\" )");

        //  jTextField1.setText("iris.clojure.core");
        jTextField1.setText("user.core");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        buttonGroup6 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jButton1.setText("Eval");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Clear");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setText("jLabel1");
        jLabel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jButton3.setText("Dump");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTextField1.setText("user");

        jLabel2.setText("jLabel2");
        jLabel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jCheckBox1.setText("Eval");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jCheckBox2.setText("readably");

        jCheckBox3.setText("print Meta");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 430, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 134, Short.MAX_VALUE)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton3)
                            .addComponent(jButton1)
                            .addComponent(jButton2))
                        .addContainerGap(71, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 726, Short.MAX_VALUE)
                                    .addComponent(jScrollPane1))
                                .addGap(28, 28, 28)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCheckBox1)
                                    .addComponent(jCheckBox2)
                                    .addComponent(jCheckBox3)))
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 844, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2)
                        .addGap(55, 55, 55)
                        .addComponent(jCheckBox1)
                        .addGap(34, 34, 34)
                        .addComponent(jCheckBox2)
                        .addGap(41, 41, 41)
                        .addComponent(jCheckBox3))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton3)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(9, 9, 9)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50))
        );
    }// </editor-fold>//GEN-END:initComponents

    public void startInterpret() {


        ExampleInitializer.initCompiler();

        ExampleInitializer.changeNamespaceToUser();

        LOG.info("startInterpret ... done");
    }

    
    
    Object readString(String str) {


        ILispReader target = new LispReaderFactory().getLispReader();        
        
        StringReader sr = new StringReader(str);
        LineNumberingPushbackReader lnpr = new LineNumberingPushbackReader(sr);

        Object result = target.read(lnpr, false, "EOF", false);
        
        
        return result;
    }

    String printClojure(Object sexp) throws IOException {

        boolean readably = jCheckBox2.isSelected();
        boolean printMeta = jCheckBox3.isSelected();
        LOG.info("readably = {}, printMeta={}", readably, printMeta);
        boolean printDup = false;

        RTPrinter printer = new RTPrinter(readably, printMeta, printDup);
        StringWriter sw = new StringWriter();

        printer.print(sexp, sw);
        sw.flush();
        return sw.toString();
    }

    // Eval button
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        LOG.info("---------- start of eval-button ---------");
        try {
            LexicalScope env = new LexicalScope();

            // 上部エリアに入力された式を取得
            String str = jTextArea1.getText();
            LOG.info("jTextArea1 = '{}'", str);
            
            boolean isEval = jCheckBox1.isSelected();
            LOG.info("isEval = {}", isEval);

            {

                Object sexp = readString(str);

                if (isEval) {

                    ExampleEvaluator evaluator = Globals.getEvaluator();
                    sexp = evaluator.eval(sexp, env);
                }

                if (sexp != null) {
                    LOG.info("267) ================== {}" , sexp.getClass().getName()  );
                }
                
                
                String strSexp = (sexp == null) ? "null" : sexp.toString();
                LOG.info("eval's result=" + strSexp);
                //画面の下部エリアに結果を表示

                String ans = printClojure(sexp);

                LOG.info("ans=" + ans);
                this.jTextArea2.setText(ans);

                // 戻り値の型を表示
                String typeStr = (sexp == null) ? "null" : sexp.getClass().getName();
                this.jLabel2.setText(typeStr);
                
                {
                    Object o2 = Globals.HISTORY2.deref();
                    Globals.HISTORY3.bindRoot(o2);
                    
                    Object o1 = Globals.HISTORY1.deref();
                    Globals.HISTORY2.bindRoot(o1);

                    Globals.HISTORY1.bindRoot(sexp);
                }
            }

        } catch (EvaluatorException ee) {

            LOG.error("Error", ee);
            
            String message = ee.toString();
            this.jTextArea2.setText(message);
          
            this.jLabel2.setText(ee.getClass().getName());
            
        } catch (Throwable re) {

            LOG.error("Error", re);

//            Throwable cause = re.getCause();
//            if (cause != null) {
//                re = cause;
//            }
            this.jLabel2.setText("error");
//            this.jTextArea2.setText(re.getClass().getName() + " : " + re.getMessage());
            this.jTextArea2.setText(re.toString());
  
        }
        
        // 画面の一番下に current namespaceを表示
        Namespace cns = CljCompiler.currentNS();
        this.jLabel1.setText(cns.getName() + ", ali=" + RT.printString(cns.getAliases()));
        
        
        LOG.info("---------- end of eval-button -----------");
    }//GEN-LAST:event_jButton1ActionPerformed

    // Clear button
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        this.jTextArea1.setText("");
        this.jTextArea2.setText("");
        this.jLabel1.setText("");
        this.jLabel2.setText("");

    }//GEN-LAST:event_jButton2ActionPerformed

    // Dump (namespace) button
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        try {

            StringWriter sw = new StringWriter();

            // Namespaceの一覧を表示
            PrintWriter pw1 = new PrintWriter(sw, true);
            try {
                Const.printNamespacesToConsole(pw1);

                pw1.println("----------");
            } finally {
                pw1.flush();
            }

            // 指定されたNamespaceの中身を表示
            String text = jTextField1.getText();
            Namespace ns = Namespace.find(Symbol.intern(text));
            if (ns != null) {
                PrintWriter pw = new PrintWriter(sw, true);
                try {
                    //  Const.printToConsole(ns, pw);
                    Const.printToConsoleAsc(ns, pw);

                } finally {
                    pw.flush();
                }
            }

            this.jTextArea2.setText(sw.toString());
        } catch (Exception re) {
            re.printStackTrace();

            JOptionPane.showMessageDialog(this, re.getMessage());
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.ButtonGroup buttonGroup6;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
